{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33ba1282-3b46-41e5-b81e-740748ada4ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import pickle\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import numpy as np\n",
    "import os\n",
    "from datetime import datetime, timedelta\n",
    "import plotly.express as px\n",
    "\n",
    "# ===== CONFIGURATION =====\n",
    "DATA_FILE = \"hospital_patients_60plus.csv\"\n",
    "MODEL_FILE = \"risk_model.pkl\"\n",
    "\n",
    "# ===== ENHANCED STYLING =====\n",
    "st.set_page_config(\n",
    "    page_title=\"Hospital Patient Monitor\",\n",
    "    page_icon=\"üè•\",\n",
    "    layout=\"wide\",\n",
    "    initial_sidebar_state=\"expanded\"\n",
    ")\n",
    "\n",
    "# Custom CSS for professional look\n",
    "st.markdown(\"\"\"\n",
    "<style>\n",
    "    .main-header {\n",
    "        font-size: 2.5rem;\n",
    "        color: #2c3e50;\n",
    "        border-bottom: 3px solid #3498db;\n",
    "        padding-bottom: 10px;\n",
    "        margin-bottom: 30px;\n",
    "    }\n",
    "    .metric-card {\n",
    "        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n",
    "        color: white;\n",
    "        padding: 20px;\n",
    "        border-radius: 15px;\n",
    "        text-align: center;\n",
    "        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n",
    "    }\n",
    "    .high-risk {\n",
    "        background-color: #ff6b6b;\n",
    "        color: white;\n",
    "        padding: 15px;\n",
    "        border-radius: 10px;\n",
    "        margin: 10px 0;\n",
    "        border-left: 5px solid #c0392b;\n",
    "    }\n",
    "    .medium-risk {\n",
    "        background-color: #ffeaa7;\n",
    "        padding: 15px;\n",
    "        border-radius: 10px;\n",
    "        margin: 10px 0;\n",
    "        border-left: 5px solid #f39c12;\n",
    "    }\n",
    "    .low-risk {\n",
    "        background-color: #55efc4;\n",
    "        padding: 15px;\n",
    "        border-radius: 10px;\n",
    "        margin: 10px 0;\n",
    "        border-left: 5px solid #00b894;\n",
    "    }\n",
    "    .sidebar .sidebar-content {\n",
    "        background: linear-gradient(180deg, #4b6cb7 0%, #182848 100%);\n",
    "        color: white;\n",
    "    }\n",
    "    .stButton>button {\n",
    "        background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);\n",
    "        color: white;\n",
    "        border: none;\n",
    "        border-radius: 8px;\n",
    "        padding: 10px 20px;\n",
    "        font-weight: bold;\n",
    "    }\n",
    "</style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# ===== INITIALIZE DATA =====\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    if os.path.exists(DATA_FILE):\n",
    "        df = pd.read_csv(DATA_FILE)\n",
    "        # Ensure LastVisit is datetime\n",
    "        df['LastVisit'] = pd.to_datetime(df['LastVisit'])\n",
    "        return df\n",
    "    else:\n",
    "        # Create sample data if file doesn't exist\n",
    "        sample_data = {\n",
    "            'PatientID': [1, 2, 3, 4, 5],\n",
    "            'Name': ['John Smith', 'Mary Johnson', 'Robert Brown', 'Susan Davis', 'James Wilson'],\n",
    "            'Age': [72, 68, 81, 65, 75],\n",
    "            'Gender': ['Male', 'Female', 'Male', 'Female', 'Male'],\n",
    "            'Condition': ['Hypertension', 'Diabetes', 'Heart Disease', 'Arthritis', 'Respiratory Issues'],\n",
    "            'LastVisit': pd.date_range('2024-01-01', periods=5),\n",
    "            'RiskScore': [65.2, 78.5, 88.9, 59.8, 72.3]\n",
    "        }\n",
    "        df = pd.DataFrame(sample_data)\n",
    "        df.to_csv(DATA_FILE, index=False)\n",
    "        return df\n",
    "\n",
    "@st.cache_resource\n",
    "def load_model(_df):\n",
    "    if not os.path.exists(MODEL_FILE):\n",
    "        X = _df[[\"Age\"]]\n",
    "        y = _df[\"RiskScore\"]\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "        model = LinearRegression()\n",
    "        model.fit(X_train, y_train)\n",
    "        pickle.dump(model, open(MODEL_FILE, \"wb\"))\n",
    "        return model\n",
    "    else:\n",
    "        return pickle.load(open(MODEL_FILE, \"rb\"))\n",
    "\n",
    "# Load data and model\n",
    "df = load_data()\n",
    "model = load_model(df)\n",
    "\n",
    "# ===== SIDEBAR =====\n",
    "with st.sidebar:\n",
    "    st.markdown(\"## ‚öôÔ∏è Dashboard Controls\")\n",
    "    st.markdown(\"---\")\n",
    "    \n",
    "    # Filters\n",
    "    risk_threshold = st.slider(\"üö® Risk Alert Threshold\", 50, 95, 70)\n",
    "    show_gender = st.multiselect(\"üë• Filter by Gender\", [\"Male\", \"Female\"], default=[\"Male\", \"Female\"])\n",
    "    \n",
    "    st.markdown(\"---\")\n",
    "    st.markdown(\"### üìä Quick Stats\")\n",
    "    st.metric(\"Total Patients\", len(df))\n",
    "    st.metric(\"High Risk\", len(df[df[\"RiskScore\"] > 75]))\n",
    "    st.metric(\"Avg Age\", f\"{df['Age'].mean():.1f}\")\n",
    "\n",
    "# ===== MAIN DASHBOARD =====\n",
    "st.markdown('<h1 class=\"main-header\">üè• Senior Patient Monitoring System</h1>', unsafe_allow_html=True)\n",
    "\n",
    "# Key Metrics\n",
    "col1, col2, col3, col4 = st.columns(4)\n",
    "with col1:\n",
    "    st.markdown('<div class=\"metric-card\">', unsafe_allow_html=True)\n",
    "    st.metric(\"Total Patients\", len(df), help=\"All patients in the system\")\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "with col2:\n",
    "    st.markdown('<div class=\"metric-card\">', unsafe_allow_html=True)\n",
    "    high_risk = len(df[df[\"RiskScore\"] > 75])\n",
    "    st.metric(\"High Risk\", high_risk, delta=f\"+{high_risk}\" if high_risk > 0 else None)\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "with col3:\n",
    "    st.markdown('<div class=\"metric-card\">', unsafe_allow_html=True)\n",
    "    st.metric(\"Average Age\", f\"{df['Age'].mean():.1f} years\", help=\"Average age of patients\")\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "with col4:\n",
    "    st.markdown('<div class=\"metric-card\">', unsafe_allow_html=True)\n",
    "    st.metric(\"Avg Risk Score\", f\"{df['RiskScore'].mean():.1f}\", help=\"Average risk score\")\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "# ===== TABS INTERFACE =====\n",
    "tab1, tab2, tab3, tab4 = st.tabs([\"üìã Patient List\", \"‚ûï Add Patient\", \"üìä Analytics\", \"üö® Alerts\"])\n",
    "\n",
    "with tab1:\n",
    "    st.subheader(\"Patient List\")\n",
    "    filtered_df = df[df[\"Gender\"].isin(show_gender)]\n",
    "    \n",
    "    # Search functionality\n",
    "    search_term = st.text_input(\"üîç Search Patients by Name\", \"\")\n",
    "    if search_term:\n",
    "        filtered_df = filtered_df[filtered_df[\"Name\"].str.contains(search_term, case=False)]\n",
    "    \n",
    "    st.dataframe(\n",
    "        filtered_df.style.format({\"RiskScore\": \"{:.1f}\"})\\\n",
    "                  .highlight_between(subset=[\"RiskScore\"], left=risk_threshold, right=100, color=\"#ff6b6b\")\\\n",
    "                  .highlight_between(subset=[\"RiskScore\"], left=60, right=risk_threshold, color=\"#ffeaa7\"),\n",
    "        use_container_width=True,\n",
    "        height=400\n",
    "    )\n",
    "\n",
    "with tab2:\n",
    "    st.subheader(\"Add New Patient\")\n",
    "    \n",
    "    with st.form(\"add_patient_form\", clear_on_submit=True):\n",
    "        col1, col2 = st.columns(2)\n",
    "        with col1:\n",
    "            new_name = st.text_input(\"üë§ Patient Name\", placeholder=\"Enter full name\")\n",
    "            new_age = st.slider(\"üéÇ Age\", min_value=60, max_value=100, value=75)\n",
    "            new_gender = st.radio(\"‚ößÔ∏è Gender\", [\"Male\", \"Female\"], horizontal=True)\n",
    "        with col2:\n",
    "            new_condition = st.selectbox(\"ü§í Condition\", [\n",
    "                \"Hypertension\", \"Diabetes\", \"Arthritis\", \n",
    "                \"Heart Disease\", \"Respiratory Issues\", \"Other\"\n",
    "            ])\n",
    "            new_last_visit = st.date_input(\"üìÖ Last Visit Date\", value=datetime.now().date())\n",
    "        \n",
    "        submitted = st.form_submit_button(\"üíæ Save Patient\", use_container_width=True)\n",
    "        \n",
    "        if submitted and new_name:\n",
    "            new_risk = model.predict([[new_age]])[0]\n",
    "            new_row = {\n",
    "                \"PatientID\": len(df) + 1,\n",
    "                \"Name\": new_name,\n",
    "                \"Age\": new_age,\n",
    "                \"Gender\": new_gender,\n",
    "                \"Condition\": new_condition,\n",
    "                \"LastVisit\": new_last_visit,\n",
    "                \"RiskScore\": float(new_risk)\n",
    "            }\n",
    "            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)\n",
    "            df.to_csv(DATA_FILE, index=False)\n",
    "            st.success(f\"‚úÖ Patient '{new_name}' added successfully!\")\n",
    "            st.balloons()\n",
    "            st.rerun()\n",
    "\n",
    "with tab3:\n",
    "    st.subheader(\"Analytics Dashboard\")\n",
    "    \n",
    "    col1, col2 = st.columns(2)\n",
    "    with col1:\n",
    "        # Risk distribution chart\n",
    "        fig = px.histogram(df, x=\"RiskScore\", nbins=20, title=\"Risk Score Distribution\")\n",
    "        st.plotly_chart(fig, use_container_width=True)\n",
    "        \n",
    "        # Age vs Risk scatter\n",
    "        fig2 = px.scatter(df, x=\"Age\", y=\"RiskScore\", color=\"Gender\", \n",
    "                         title=\"Age vs Risk Score\", hover_data=[\"Name\"])\n",
    "        st.plotly_chart(fig2, use_container_width=True)\n",
    "    \n",
    "    with col2:\n",
    "        # Condition distribution\n",
    "        condition_counts = df[\"Condition\"].value_counts()\n",
    "        fig3 = px.pie(condition_counts, values=condition_counts.values, \n",
    "                     names=condition_counts.index, title=\"Conditions Distribution\")\n",
    "        st.plotly_chart(fig3, use_container_width=True)\n",
    "        \n",
    "        # Gender distribution\n",
    "        gender_counts = df[\"Gender\"].value_counts()\n",
    "        fig4 = px.pie(gender_counts, values=gender_counts.values, \n",
    "                     names=gender_counts.index, title=\"Gender Distribution\")\n",
    "        st.plotly_chart(fig4, use_container_width=True)\n",
    "\n",
    "with tab4:\n",
    "    st.subheader(\"Priority Alerts\")\n",
    "    \n",
    "    high_risk_patients = df[df[\"RiskScore\"] > risk_threshold]\n",
    "    medium_risk = df[(df[\"RiskScore\"] > 60) & (df[\"RiskScore\"] <= risk_threshold)]\n",
    "    \n",
    "    if not high_risk_patients.empty:\n",
    "        st.markdown(\"### üö® Immediate Attention Required\")\n",
    "        for _, row in high_risk_patients.iterrows():\n",
    "            days_since_visit = (datetime.now().date() - row['LastVisit'].date()).days\n",
    "            st.markdown(f\"\"\"\n",
    "            <div class=\"high-risk\">\n",
    "                <h4>üöë {row['Name']} (Age: {row['Age']})</h4>\n",
    "                <b>Risk Score: {row['RiskScore']:.1f}</b> | Condition: {row['Condition']}<br>\n",
    "                Last Visit: {row['LastVisit'].strftime('%Y-%m-%d')} ({days_since_visit} days ago)\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "    else:\n",
    "        st.success(\"üéâ No patients requiring immediate attention!\")\n",
    "    \n",
    "    if not medium_risk.empty:\n",
    "        st.markdown(\"### ‚ö†Ô∏è Schedule Follow-up\")\n",
    "        for _, row in medium_risk.iterrows():\n",
    "            st.markdown(f\"\"\"\n",
    "            <div class=\"medium-risk\">\n",
    "                <b>{row['Name']}</b> (Age: {row['Age']}) - Risk Score: {row['RiskScore']:.1f}<br>\n",
    "                Condition: {row['Condition']} | Last Visit: {row['LastVisit'].strftime('%Y-%m-%d')}\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# ===== FOOTER =====\n",
    "st.markdown(\"---\")\n",
    "st.markdown(\"*Built with ‚ù§Ô∏è using Streamlit | Hospital Patient Monitoring System v2.0*\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
